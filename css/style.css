.carousel-inner img {
    width: 100%;
    height: 90vh;
}

* {
    font-family: "Times New Roman";
}

.aboutImg {
    width: 100%;
    height: 380px;
}

* {
    box-sizing: border-box;
}

.row {
    display: flex;
}

/* Create three equal columns that sits next to each other */
.column {
    flex: 20%;
    padding: 5px;
}

.txtcenter {
    text-align: center;
}

.btn1 {
    display: inline-block;
    background: black;
    margin-top: 1rem;
    color: var(--white);
    font-size: 1.7rem;
    padding: 1rem 3rem;
    cursor: pointer;
}

.btn1:hover {
    background: green;
}

.btn1:link {
    color: white;
}

a:link {
    color: white;
}

p,
h1,
h2,
h3 {
    font-weight: bolder;
}

body {
    font-size: 16px;
    background: #f9f9f9;
    font-family: "Segoe UI", "Helvetica Neue", Arial, sans-serif;
}

h2 {
    text-align: center;
    text-decoration: underline;
}

form {
    width: 500px;
    /*background: rgb(235, 229, 229);
    border: 1px solid #ccc;
    border-radius: 5px;
    color: rgb(105, 99, 99);*/
    margin: 50px auto 0;
    font-weight: bolder;
    padding: 15px 40px 40px;

}

label {
    display: block;
    margin-bottom: 5px
}

label i {
    color: #999;
    font-size: 80%;
}

input,
select {
    border: 1px solid #ccc;
    padding: 10px;
    display: block;
    width: 100%;
    box-sizing: border-box;
    border-radius: 2px;
}

.row {
    padding-bottom: 10px;
}

.form-inline {
    border: 1px solid #ccc;
    padding: 8px 10px 4px;
    border-radius: 2px;
}

.form-inline label,
.form-inline input {
    display: inline-block;
    width: auto;
    padding-right: 15px;
}

.error {
    color: rgb(255, 255, 255);
    font-size: 90%;
}

input[type="submit"] {
    font-size: 110%;
    font-weight: 100;
    background: #006dcc;
    border-color: #016BC1;
    box-shadow: 0 3px 0 #0165b6;
    color: #fff;
    margin-top: 10px;
    cursor: pointer;
}

input[type="submit"]:hover {
    background: #0165b6;
}

.container {
    position: relative;
    text-align: center;
    color: white;
}

.centered {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

#myVideo {
    position: relative;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
}

.viewport-header {
    position: relative;
    height: 100%;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
}

.h1 {
    font-family: 'Syncopate', sans-serif;
    color: white;
    text-transform: uppercase;
    letter-spacing: 3vw;
    line-height: 1.2;
    font-size: 3vw;
    text-align: center;
}

.h1 span {
    display: block;
    font-size: 10vw;
    letter-spacing: -1.3vw;
}

main {
    background: rgba(black, 0.66);
    color: white;
    position: relative;
    padding: 1rem;
}

main p {
    max-width: 600px;
    margin: 1rem auto;
}

video {
    object-fit: cover;
    width: 100vw;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
}

.container{
    height: 800px;
    width: 100%;
    border: 3px solid black;
    display: flex;/*display flex is used to initialise container as flex*/
    /*flex properties for container*/
    flex-direction: column;
    flex-direction: row-reverse;
    flex-direction: row ;
    /*flex-direction changes the direction of how items are filled in container, by default flex-direction is row*/
    /*flex-wrap helps us in wrapping up of items if we change size of our container, by default it is nowrap*/
    flex-wrap: wrap;
    /*using flex-flow we can specify both flex direction and wrapping*/
    flex-flow: row wrap;
    /*justify content is used to align our items*/
    justify-content: center;
    justify-content: flex-start;
    justify-content: space-evenly;
    /*justify content could be center, flex-start, flex-end, space-between(space between item is same),space around(space around items is same),space-evenly(spaces including starting and end is same) etc*/
    
    /*align items is used to align the items*/
    align-items:flex-end;
    /*flex end pushes elements at the end*/
    align-items: center;
    /*center makes the items vertically center in container*/
}
.box{
    width: 150px;
    height: 200px;
    color: darkred;
    font-weight: bolder;
    border: 2px solid rgb(10, 17, 10);
    background-color:rgb(207, 164, 22);
    margin: 8px;
    padding: 10px;
}
/*flexbox properties in case of item*/
#item1{
    /*increasing the value of order will shift position of element to last, elements with bigger order will be at the end*/
    order: 4;
    flex-grow: 3;
    flex-shrink: 3;
    /*flex-grow will change the size of box and grow it multiple times, negative number are invalid*/
    
}
#item2{
    flex-shrink: 3;
    /*flex-shrink decreases the size of decreases the size of item*/
}
#item3{
    /*flex-grow: 2;*/
    /*we can fix the size of item using flex-basis*/
    flex-basis: 100px;
    /*so the size of this item decreased as I specified a smaller width*/
    /*when flex-direction is set to row, then flex basis will control width or otherwise column*/
}